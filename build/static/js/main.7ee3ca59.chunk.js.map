{"version":3,"sources":["Navi.js","Category.js","ProductList.js","App.js","serviceWorker.js","index.js"],"names":["Navi","Component","Category","state","categories","categoryId","categoryName","this","props","info","title","ListGroup","map","category","ListGroupItem","onClick","changeCategory","key","currentCategory","ProductList","App","setState","Container","Row","Col","xs","Info","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAEqBA,E,uKAEb,OACI,6BACI,oD,GAJkBC,a,gBCCbC,E,4MAEjBC,MAAQ,CACJC,WAAY,CACV,CAAEC,WAAY,EAAGC,aAAc,cAC/B,CAAED,WAAY,EAAGC,aAAc,W,uDAK7B,IAAD,OACP,OACE,6BACE,4BAAKC,KAAKC,MAAMC,KAAKC,OACrB,kBAACC,EAAA,EAAD,KACGJ,KAAKJ,MAAMC,WAAWQ,KAAI,SAACC,GAAD,OACzB,kBAACC,EAAA,EAAD,CACIC,QAAW,kBAAM,EAAKP,MAAMQ,eAAeH,IACtCI,IAAKJ,EAASR,YACdQ,EAASP,kBAIpB,4BAAKC,KAAKC,MAAMU,sB,GAvBYjB,aCDjBkB,E,uKAEb,OACI,6BACI,4BAAKZ,KAAKC,MAAMC,KAAKC,Y,GAJIT,a,wBCKpBmB,E,4MAEnBjB,MAAQ,CAACe,gBAAgB,K,EAEzBF,eAAiB,SAAAH,GACb,EAAKQ,SAAS,CAACH,gBAAiBL,EAASP,gB,uDAMzC,OACI,6BACE,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACC,kBAAC,EAAD,OAED,kBAACA,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACL,kBAAC,EAAD,CAAUP,gBAAmBX,KAAKJ,MAAMe,gBAAiBF,eAAkBT,KAAKS,eAAgBU,KAVxF,CAAChB,MAAQ,eAYrB,kBAACc,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC,EAAD,CAAahB,KAZP,CAACC,MAAQ,qB,GAVAT,aCKb0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ee3ca59.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Navi extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2> navi compoent </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nexport default class Category extends Component {\r\n  \r\n    state = {\r\n        categories: [\r\n          { categoryId: 1, categoryName: \"vegatables\"},\r\n          { categoryId: 2, categoryName: \"fruit\"}\r\n        ]\r\n      \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.props.info.title}</h2>\r\n        <ListGroup>\r\n          {this.state.categories.map((category) => (\r\n            <ListGroupItem \r\n                onClick = {() => this.props.changeCategory(category)} \r\n                     key={category.categoryId}> \r\n                    {category.categoryName}\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n          <h4>{this.props.currentCategory}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ProductList extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>{this.props.info.title}</h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Navi from \"./Navi.js\";\r\nimport Category from \"./Category.js\";\r\nimport ProductList from \"./ProductList.js\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\n\r\nexport default class App extends Component{\r\n\r\n  state = {currentCategory:\" \"}\r\n\r\n  changeCategory = category => {\r\n      this.setState({currentCategory: category.categoryName})\r\n\r\n  }\r\n  render(){\r\n      let categoriyInfo = {title : \"Category\"}\r\n      let productInfo = {title : \"Product\"}\r\n      return(\r\n          <div>\r\n            <Container>\r\n              <Row>\r\n               <Navi />\r\n              </Row>\r\n              <Row>\r\n               <Col xs=\"3\">\r\n                  <Category currentCategory = {this.state.currentCategory} changeCategory = {this.changeCategory} Info = {categoriyInfo} />\r\n                </Col>\r\n              <Col xs=\"9\">\r\n                  <ProductList info = {productInfo} />\r\n              </Col>\r\n              </Row>\r\n            </Container>\r\n    </div>\r\n\r\n      )};\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n//C:\\Users\\Administrator\\react\\intro\\node_modules\\bootstrap\\dist\\css\\bootstrap.min.css\n\nReactDOM.render( <App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}